#

**About arc42**

arc42, the template for documentation of software and system
architecture.

Template Version 8.2 EN. (based upon AsciiDoc version), January 2023

Created, maintained and © by Dr. Peter Hruschka, Dr. Gernot Starke and
contributors. See <https://arc42.org>.

<div class="note">

This version of the template contains some help and explanations. It is
used for familiarization with arc42 and the understanding of the
concepts. For documentation of your own system you use better the
_plain_ version.

</div>

<div style="page-break-after: always;"></div>

<hr>
<br>

# 1. Introduction and Goals

The following arc42 template deals with the architecture and documentation of an "Image Sharing App". We are a team of dedicated professionals, working for a regional technology company.

Team members are:

Alexander B.  
Alireza J.  
Carolin M.

## 1.1. Requirements Overview

<div class="formalpara-title">

**What is the Image Sharing App?**  
The main purpose is an image sharing app targeting photography enthusiasts and professionals, with a strong community aspect.

**Main features**

- Register and login
- Upload and share images
- Like images
- Comment on images
- Advanced editing through a third party integration with Pixlr
- Make, use and save custom image filters
- Social feed for following other users
- Free tier with limited features and subscription model for full access

The app must be able to handle a large concurrent user base.

</div>

## 1.2. Quality Goals

<div class="formalpara-title">

Table 1. Quality Goals

| Priority | Quality     | Motivation                                                                                                                    |
| -------- | ----------- | ----------------------------------------------------------------------------------------------------------------------------- |
| 1        | [Usability](#Usability)   | The app must be user-friendly and easy to navigate The subscription model must be clearly communicated and easy to understand |
| 2        | [Reliability](#Reliability) | The app must be stable and function without significant bugs or errors                                                        |
| 3        | [Performance](#Performance) | The app must be optimized for [performance](#Performance) and load times                                                                      |

</div>

## 1.3. Stakeholders

<div class="formalpara-title">

The following lists contains the most important personas for this application

Table 2. Stakeholders

| Role/Name                                                  | Expectations                                                                                                                                                                                                  |
| ---------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Marketing Manager, Sarah Chen, Bold Branding Agency        | Expecting that the features of the application match the needs of the market, that the app is attractive to the target audience so that commercialisation and marketing campaigns are successful.             |
| Project Manager, Michael Nguyen, Digital Dreams Inc.       | Expecting that the development of the app meets the timeframe and scope to manage deadlines, meetings and costs; Management of optimal use of resources; Focus on communication and collaboration of the team |
| Lead Developer, Ava Patel, Pixel Perfect Solutions         | High quality of application development, clear idea of the architecture, clear documentation; Prioritizing quality goals in application development;                                                          |
| UX/UI Designer, Emily Wong, Creative Co.                   | intuitive and attractive user interface with a focus on [usability](#Usability)                                                                                                                                             |
| User Representative, Samir Singh, Photography Enthusiast   | easy and intuitive [usability](#Usability), users' wishes are fulfilled, high [reliability](#Reliability) (no crashes or errors)                                                                                                            |
| Photography Expert, Lucas Rodriguez, Snap & Shoot Magazine | Testing the application and ensuring that the specific features of the application meet the needs of professional photographers.                                                                              |

</div>

<div style="page-break-after: always;"></div>

<hr>
<br>

# 2. Architecture Constraints

<div class="formalpara-title">

| Constraints                 | Background and/or motivation                                                                                                                                       |
| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| Storage and Data Management | Because of high-quality images, each user should have a memory limitation; Cloud based storage; Efficient Data retrieval: efficient search and retrieval of images |
| Multi-Language-support      | Because it is a regional project in Austria, it should support both german and english                                                                             |
| Third-party-integration     | The integration of the third-party service (Pixlr) puts some constraints on the features of the application, ensure efficient API management                       |
| Budgetary Limitations       | available budget constraints the scale of infrastructure, and the acquisition of third-party services                                                              |
| Platform Compatibility      | The application should work on IOS                                                                                                                                 |

**Contents**

</div>

Any requirement that constraints software architects in their freedom of
design and implementation decisions or decision about the development
process. These constraints sometimes go beyond individual systems and
are valid for whole organizations and companies.

<div class="formalpara-title">

**Motivation**

</div>

Architects should know exactly where they are free in their design
decisions and where they must adhere to constraints. Constraints must
always be dealt with; they may be negotiable, though.

<div class="formalpara-title">

**Form**

</div>

Simple tables of constraints with explanations. If needed you can
subdivide them into technical constraints, organizational and political
constraints and conventions (e.g. programming or versioning guidelines,
documentation or naming conventions)

See [Architecture Constraints](https://docs.arc42.org/section-2/) in the
arc42 documentation.

<div style="page-break-after: always;"></div>

<hr>
<br>

# 3. System Scope and Context

<div class="formalpara-title">

**Contents**

</div>

System scope and context - as the name suggests - delimits your system
(i.e. your scope) from all its communication partners (neighboring
systems and users, i.e. the context of your system). It thereby
specifies the external interfaces.

If necessary, differentiate the business context (domain specific inputs
and outputs) from the technical context (channels, protocols, hardware).

<div class="formalpara-title">

**Motivation**

</div>

The domain interfaces and technical interfaces to communication partners
are among your system’s most critical aspects. Make sure that you
completely understand them.

<div class="formalpara-title">

**Form**

</div>

Various options:

- Context diagrams

- Lists of communication partners and their interfaces.

See [Context and Scope](https://docs.arc42.org/section-3/) in the arc42
documentation.

## 3.1. Business Context

<div class="formalpara-title">

<table border="1">
    <tr>
        <th>Communication Partner</th>
        <th>Interfaces</th>
        <th>Inputs</th>
        <th>Outputs</th>
    </tr>
    <tr>
        <td>Users</td>
        <td>Mobile App, User Interface, social feed</td>
        <td>User credentials, image upload, comments, likes</td>
        <td>shared images, notifications</td>
    </tr>
    <tr>
        <td>IT-Systems (Pixlr)</td>
        <td>Pixlr Integration, Image Editing</td>
        <td>Image data, filter settings</td>
        <td>edited images, processing status</td>
    </tr>
    <tr>
        <td>Cloud provider</td>
        <td>Cloud Storage APIs</td>
        <td>Image storage and retrieval</td>
        <td>Scalable image storage solution</td>
    </tr>
    <tr>
        <td>Subscription System</td>
        <td>Payment Gateway, Subscription Management</td>
        <td>User subscriptions, payment details</td>
        <td>Full access permissions</td>
    </tr>
    <tr>
        <td>Social Media Platforms</td>
        <td>Social Media APIs</td>
        <td>User shared content</td>
        <td>Increased app visibility, user acquisition</td>
    </tr>
    <tr>
        <td>Marketing Manager</td>
        <td>Marketing Campaign, Analytics Integration</td>
        <td>Marketing data, campaign details</td>
        <td>user engagement data</td>
    </tr>
    <tr>
        <td>UX/UI Designer</td>
        <td>UI/UX Design, Design Tools</td>
        <td>Design mockups, User feedback</td>
        <td>UI/UX improvements, <a href="#Usability">usability</a> metrics</td>
    </tr>
</table>

</div>

Specification of **all** communication partners (users, IT-systems, …)
with explanations of domain specific inputs and outputs or interfaces.
Optionally you can add domain specific formats or communication
protocols.

<div class="formalpara-title">

**Motivation**

</div>

All stakeholders should understand which data are exchanged with the
environment of the system.

<div class="formalpara-title">

**Form**

</div>

All kinds of diagrams that show the system as a black box and specify
the domain interfaces to communication partners.

Alternatively (or additionally) you can use a table. The title of the
table is the name of your system, the three columns contain the name of
the communication partner, the inputs, and the outputs.

**\<Diagram or Table>**

**\<optionally: Explanation of external domain interfaces>**

## 3.2. Technical Context

<div class="formalpara-title">

**Contents**

</div>

Technical interfaces (channels and transmission media) linking your
system to its environment. In addition a mapping of domain specific
input/output to the channels, i.e. an explanation which I/O uses which
channel.

<div class="formalpara-title">

**Motivation**

</div>

Many stakeholders make architectural decision based on the technical
interfaces between the system and its context. Especially infrastructure
or hardware designers decide these technical interfaces.

<div class="formalpara-title">

**Form**

</div>

E.g. UML deployment diagram describing channels to neighboring systems,
together with a mapping table showing the relationships between channels
and input/output.

**\<Diagram or Table>**

## 3.2. Technical Context

## Technical Context / explanation of Interfaces

<table border="1">
    <tr>
        <th>Interface</th>
        <th>Description</th>
        <th>I/O</th>
    </tr>
    <td><b>User API</b></td>
        <td>Handles user authentication, profile management, and other</td>
        <td>REST requests</td>
    </tr>
    <tr>
        <td><b>Image API</b></td>
        <td>Handles image upload, retrieval, and basic image operations via RESTful services</td>
        <td>REST requests</td>
    </tr>
    <tr>
        <td><b>Pixlr API</b></td>
        <td>Handles Pixlr (external service) for advanced image editing</td>
        <td>in: Images<br>out: Edited images</td>
    </tr>
    <tr>
        <td><b>Cloud Storage API</b></td>
        <td>Handles the storage and retrieval of images and user data</td>
        <td>REST requests</td>
    </tr>
    <tr>
        <td><b>Notification API</b></td>
        <td>Handles sending notifications to users</td>
        <td>REST requests?</td>
    </tr>
    <tr>
        <td><b>Mobile App</b></td>
        <td>The frontend application running on user devices</td>
        <td>REST requests</td>
    </tr>
</table>

**\<Mapping Input/Output to Channels>**

<div style="page-break-after: always;"></div>

<hr>
<br>

# 4. Solution Strategy

<div class="formalpara-title">

<table border="1">
    <tr>
        <th>Goal/Requirements</th>
        <th>Architectural Approach</th>
    </tr>
    <tr>
        <td>Scalability</td>
        <td><a href="#Microservices">Microservices</a></td>
    </tr>
    <tr>
        <td><a href="#Performance">Performance</a></td>
        <td><a href="#Caching strategy">Caching Strategies</a> and <a href="#Content Delivery Network (CDN)">Content Delivery Networks (CDN)</a></td>
    </tr>
    <tr>
        <td><a href="#Reliability">Reliability</a></td>
        <td>Redundancy and <a href="#Load Balancing">Load Balancing</a></td>
    </tr>
</table>

</div>

A short summary and explanation of the fundamental decisions and
solution strategies, that shape system architecture. It includes

- technology decisions

- decisions about the top-level decomposition of the system, e.g.
  usage of an architectural pattern or design pattern

- decisions on how to achieve key quality goals

- relevant organizational decisions, e.g. selecting a development
  process or delegating certain tasks to third parties.

<div class="formalpara-title">

**Motivation**

</div>

These decisions form the cornerstones for your architecture. They are
the foundation for many other detailed decisions or implementation
rules.

<div class="formalpara-title">

**Form**

</div>

Keep the explanations of such key decisions short.

Motivate what was decided and why it was decided that way, based upon
problem statement, quality goals and key constraints. Refer to details
in the following sections.

See [Solution Strategy](https://docs.arc42.org/section-4/) in the arc42
documentation.

<div style="page-break-after: always;"></div>

<hr>
<br>

# 5. Building Block View

## 5.1. Whitebox Overall System

![Building Block View Level 1](images/05_level1.png)
<br>

**Contained blackboxes**

<<<<<<< HEAD
| Components                 | Description|
| --------------------------- | -------------------------------------------- |
|Image processing | The "Image Processing" component handles the retrieval, transmission, and processing of images, ensuring efficient and high-quality image manipulation. |
| User profile | The "User Profile" component manages user account information, preferences, and settings, offering a personalized user experience. |
| Notifications | The "Notifications" component is responsible for generating and delivering alerts and messages to users based on their activities and preferences. |
| Images | The "Images" component is dedicated to storing and retrieving image files, optimized for high-volume and large-size image data handling.|
|User data | The "User Data" component focuses on storing and managing user-specific data, including preferences, usage history, and personal information, ensuring data integrity and privacy|
|Image Metadata | The "Image Metadata" component manages information related to images, such as tags, descriptions, and ownership details, facilitating efficient image categorization and searchability.|
|Data handling | The "Data handling" component is the primary data handling solution, designed for robust, scalable, and secure handling of app data, including images and metadata and communicating with the cloud storage.|
=======
| Components           | Description                                                                                                                                                                             |
| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Image processing     | The "Image Processing" component handles the retrieval, transmission, and processing of images, ensuring efficient and high-quality image manipulation.                                 |
| User profile         | The "User Profile" component manages user account information, preferences, and settings, offering a personalized user experience.                                                      |
| Notifications        | The "Notifications" component is responsible for generating and delivering alerts and messages to users based on their activities and preferences.                                      |
| Images               | The "Images" component is dedicated to storing and retrieving image files, optimized for high-volume and large-size image data handling.                                                |
| User data            | The "User Data" component focuses on storing and managing user-specific data, including preferences, usage history, and personal information, ensuring data integrity and privacy       |
| Image Metadata       | The "Image Metadata" component manages information related to images, such as tags, descriptions, and ownership details, facilitating efficient image categorization and searchability. |
| Files system storage | The "File System Storage" component is the primary data storage solution, designed for robust, scalable, and secure storage of app data, including images and metadata.                 |
>>>>>>> abee37a8e20917935b254e76935c333ddcb2e062

<br>

**Interfaces**
| Interfaces | Description|
| --------------------------- | -------------------------------------------- |
|Image API| The "Image API" serves as an interface to interact with the image processing functionalities, enabling seamless integration and data exchange.|
|Pxlr API| The "Pixlr API" is integrated for advanced image editing and processing capabilities, enriching the app's image manipulation features.|
|User API | The "User API" provides a gateway to access and manage user profile data, ensuring a consistent and secure user data handling.|
|Notifications API | The "Notification API" facilitates the integration of various notification services, allowing for customizable and responsive user notifications.|
|Cloud Storage API| The "Cloud Storage API" enables the app to interact with cloud-based storage solutions, providing scalable and efficient data storage options.|

<br>

## 5.2. Level 2 - Image Processing (Whitebox)

![Building Block View Level 2](images/05_level2.png)

<br>

**Contained blackboxes**

| Components             | Description                                                                                                                                                                   |
| ---------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Image processing Queue | The "Image Processing Queue" efficiently organizes and prioritizes image processing tasks, ensuring orderly and timely handling of image manipulations.                       |
| Image Controller       | The "Image Controller" acts as the central hub for managing and directing all image-related operations, including processing requests and coordinating with other components. |
| pixlr                  | The "Pixlr" component interfaces with the Pixlr API to provide advanced image editing and processing capabilities within the application.                                     |
| Image Repository       | The "Image Repository" is responsible for the storage and retrieval of images and the image data management.                                                                  |

## 5.3. Level 3 - Image Controller (Whitebox)

![Building Block View ImageController](images/05_ImageControllerComponents.png)
<br>
| Class | Description|
| --------------------------- | -------------------------------------------- |
|RequestHandler | **Purpose**: Manages incoming image processing requests.<br>**Responsibilities**: Validates requests, parses parameters, and routes them to the appropriate service or queue.|
|Task Manager|**Purpose**: handles scheduling and dispatching of tasks, making it the central point for task management. <br>**Responsibilities**: Organizes and assigns image processing tasks, manages the processing workflow, and oversees task execution based on system load and priorities.|
|Response and Resource Coordinator| **Purpose**: takes care of assembling responses and managing resources, streamlining post-processing operations. <br>**Responsibilities**: Assembles and delivers processed image responses while managing system resources (like memory and processor usage) and handling post-processing resource cleanup.|
|Monitoring and Logging| **Purpose**: Monitors the performance and health of the Image Controller.<br>**Responsibilities**: Logs system activity, tracks performance metrics, and alerts administrators to potential issues.|
|Configuration Manager | **Purpose**: Handles configuration settings for the Image Controller. <br>**Responsibilities**: Manages settings related to processing algorithms, API integrations, and operational parameters.|
|API Interface | **Purpose**: Serves as the interface for communication with other system components or external APIs. <br>**Responsibilities**: Translates internal processing results to API responses, and vice versa for incoming requests.|

<hr>
<br>

# 6. Runtime View

<div class="formalpara-title">

**Contents**

</div>

The runtime view describes concrete behavior and interactions of the
system’s building blocks in form of scenarios from the following areas:

- important use cases or features: how do building blocks execute
  them?

- interactions at critical external interfaces: how do building blocks
  cooperate with users and neighboring systems?

- operation and administration: launch, start-up, stop

- error and exception scenarios

Remark: The main criterion for the choice of possible scenarios
(sequences, workflows) is their **architectural relevance**. It is
**not** important to describe a large number of scenarios. You should
rather document a representative selection.

<div class="formalpara-title">

**Motivation**

</div>

You should understand how (instances of) building blocks of your system
perform their job and communicate at runtime. You will mainly capture
scenarios in your documentation to communicate your architecture to
stakeholders that are less willing or able to read and understand the
static models (building block view, deployment view).

<div class="formalpara-title">

**Form**

</div>

There are many notations for describing scenarios, e.g.

- numbered list of steps (in natural language)

- activity diagrams or flow charts

- sequence diagrams

- BPMN or EPCs (event process chains)

- state machines

- …

See [Runtime View](https://docs.arc42.org/section-6/) in the arc42
documentation.

## User with uploads an image

![Sequence diagram of image upload](images/Upload_seq.png)

- The User API acts as a gatekeeper to ensure the user is valid

## User edits an image with Pixlr and uploads it

![Sequence diagram of profile update](images/Pixlr_seq.png)

- The User API acts as a gatekeeper to ensure the user is valid and has a subscription

<div style="page-break-after: always;"></div>

<hr>
<br>

# 7. Deployment View
<br>

![Deployment View diagram](images/07_deplomentView.png)

| Node                 | Description|
| --------------------------- | -------------------------------------------- |
|Development Environment||
|Mobile Device||
|Server - backend processing||
|Cloud||
|pxlr Server||



<hr>
<br>

## 8. Cross-cutting Concepts

### 8.1 Domain Concepts

Our application adopts a domain-driven design to allow developers and business experts to collaborate more efficiently.

### 8.2 User Experience (UX) Concepts

- **Responsive Design**
- **Intuitive Navigation**
- **Error Handling**

### 8.3 Safety and Security Concepts

We implement comprehensive authentication mechanisms, often considering OAuth2 for secure access management. Data protection is enhanced through:

- **Encryption for sensitive data**
- **Compliance to the Digital Service Act** TODO: look up other relevant laws?

### 8.4 Architecture and Design Patterns

#### Frontend Using React Native

- **Pattern:** TODO: MVC? Command pattern?
- **Component-Based Structure:** Reusable UI components and efficient state management.

#### Backend Using Node.js

- **[Microservices](#Microservices) Architecture for scalability and ease of maintanance**
- **RESTful APIs for decoupling communication between frontend and backend services**

### 8.5 "Under-the-Hood"

TODO: choose database. We use AWS for hosting, taking advantage of their scalability and reliability.

### 8.6 Development Concepts

We adhere to **Agile methodologies**, encouraging iterative development and incorporating regular stakeholder feedback. Our development practices include:

- **Git for Version Control and Peer-Reviews**
- **CI/CD Pipelines with automated testing and deployment**

### 8.7 Operational Concepts

Our operational strategy includes:

- **Docker for Containerization**
- **Robust Logging for error tracking and diagnosis**

<div style="page-break-after: always;"></div>

<hr>
<br>

# 9. Architecture Decisions

<div class="formalpara-title">

<table border="1">
    <tr>
        <th>Problem</th>
        <th>Considered Alternatives</th>
        <th>Decision</th>
    </tr>
    <tr>
        <td>Large number of users/images</td>
        <td>
            <ul>
                <li><a href="#Microservices">Microservices</a></li>
                <li><a href="#Monolithic">Monolithic</a></li>
            </ul>
        </td>
        <td><a href="#Microservices">Microservices</a>, because of scalability and <a href="#Reliability">reliability</a> in a scaling scenario</td>
    </tr>
    <tr>
        <td>Optimizing Image Loading Performance</td>
        <td>
            <ul>
                <li><a href="#Synchronous Image Loading">Synchronous Image Loading</a></li>
                <li><a href="#ASynchronous Image Loading with Caching">ASynchronous Image Loading with Caching</a></li>
            </ul>
        </td>
        <td>Asynchronous, because of faster loading, smoother user experience, reduced waiting.</td>
    </tr>
    <tr>
        <td>Ensuring High Availability in Case of Server Failures</td>
        <td>
            <ul>
                <li><a href="#Single Server with Failover Mechanism">Single Server with Failover Mechanism</a</li>
                <li><a href="#Load Balancing">Load Balancing</a> across Multiple Servers</li>
            </ul>
        </td>
        <td><a href="#Load Balancing">Load Balancing</a>, because of enhanced <a href="#Reliability">reliability</a>, prevents overloading, ensures availability.</td>
    </tr>
</table>
</br>

</div>

<div style="page-break-after: always;"></div>

<hr>
<br>

# 10. Quality Requirements

## 10.1. Quality Tree

<div class="formalpara-title">

![Hierarchy of building blocks](images/09_Quality_tree.png)

</div>

## 10.2. Quality Scenarios

<div class="formalpara-title">

**[Usability](#Usability)**

</div>

Scenario 1: A new user attempts to register and create a profile.

The user has instaled the app and opened it for the first time. When the user navigates to the registration screen, the registration process should be easily understandable and the user should complete the registration process without assistance.

Scenario 2: A user explores subscription options.

An existing user is interested in premium features. When the user navigates to the subscription information section, the subscription options should be clearly presented, with differences between tiers easily understandable.

<div class="formalpara-title">

**[Reliability](#Reliability)**

</div>

Scenario 1: Handling high concurrent user load.

A significant number of users are accessing the app simultaneously. When users are uploading, editing, and sharing images, the app should function smoothly without crashing or significant lag.

Scenario 2: Recovering from a server failure.

One of the servers hosting the app fails. The failure occurs during peak usage hours. Then the system should automatically reroute traffic to other servers, ensuring uninterrupted service for users.

<div class="formalpara-title">

**[Performance](#Performance)**

</div>

Scenario 1: Image upload and retrieval speed.

A user selects a high-resolution image to upload. When the user uploads the image, it should be uploaded and available for viewing in a reasonable amount of time.

Scenario 2: Response time during peak usage.

The app is experiencing peak traffic. When a user performs an action requiring server response, the action should complete within a few seconds, even under high load.

<div style="page-break-after: always;"></div>

<hr>
<br>

# 11. Risks and Technical Debts

<div class="formalpara-title">

<table border="1">
    <tr>
        <th>Risk/Technical Debt</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>reliance on third-party service (Pixlr)</td>
        <td>Pixlr downtime limits app's image editing functionality; Implement failover: multiple external services, local/hosted image editing backups.</td>
    </tr>
    <tr>
        <td>Data security and privacy compliance</td>
        <td>Security risks: data breaches, legal implications possible; Regular audits, encryption, access control, and policies</td>
    </tr>
    <tr>
        <td><a href="#Performance">Performance</a> reduction due to unoptimized image sharing</td>
        <td><a href="#Performance">Performance</a> reduction as the user base grows and image uploads increase; Utilize image compression techniques to decrease file sizes without compromising quality; Regular <a href="#Performance">performance</a> testing and optimization</td>
    </tr>
</table>
</div>
</br>
<!-- A list of identified technical risks or technical debts, ordered by
priority

<div class="formalpara-title">

**Motivation**

</div>

“Risk management is project management for grown-ups” (Tim Lister,
Atlantic Systems Guild.)

This should be your motto for systematic detection and evaluation of
risks and technical debts in the architecture, which will be needed by
management stakeholders (e.g. project managers, product owners) as part
of the overall risk analysis and measurement planning.

<div class="formalpara-title">

**Form**

</div>

List of risks and/or technical debts, probably including suggested
measures to minimize, mitigate or avoid risks or reduce technical debts.

See [Risks and Technical Debt](https://docs.arc42.org/section-11/) in
the arc42 documentation.

<div style="page-break-after: always;"></div> -->

<hr>
<br>

# 12. Glossary

| Term                                   | Definition                                                                                                                                                                                                                                                                                                                                                                                                 |
| -------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| <a id="ASynchronous Image Loading with Caching">ASynchronous Image Loading with Caching</a> | _A technique where images are loaded independently of the main program flow, allowing the user interface to remain responsive. Caching stores previously loaded images for quicker access in future requests, reducing loading times and server load._                                                                                                                                                     |
| <a id="Caching strategy">Caching strategy</a>                       | _A method used to store frequently accessed data temporarily in a readily accessible location, improving response time and reducing the load on the primary data source._                                                                                                                                                                                                                                  |
| <a id="Content Delivery Network (CDN)">Content Delivery Network (CDN)</a>         | _A global network of servers strategically positioned to deliver web content like images, videos, and web pages to users more efficiently. When a user requests content, the CDN redirects the request to the nearest server, reducing the distance the data travels, thus minimizing latency and speeding up loading times. This helps in handling high traffic loads and improving website [performance](#Performance)._ |
| <a id="Load Balancing">Load Balancing</a>                          | _A process used in network and server architectures where incoming requests or network traffic is distributed evenly across multiple servers or resources. This ensures no single server becomes overwhelmed, leading to improved response times and [reliability](#Reliability)._                                                                                                                                         |
| <a id="Microservices">Microservices</a>                          | _An architectural approach that structures an application as a collection of small, independent services. Each service is focused on a specific function and communicates with other services through well-defined APIs. This approach enables easier scaling, maintenance, and faster deployment of individual components._                                                                               |
| <a id="Monolithic">Monolithic</a>                             | _An architectural style where an application is built as a single, unified unit. In a monolithic architecture, all components of the application – such as the user interface, business logic, and data access layer – are tightly integrated and deployed as one entity. This approach can simplify development and deployment initially but may become complex and unwieldy as the application grows._   |
| <a id="Performance">Performance</a>                            | _Refers to how well a software system meets its non-functional requirements related to speed, responsiveness, and efficiency. In software architecture, performance encompasses design considerations that affect how quickly and effectively a system processes data, handles load, and responds to user interactions._                                                                                   |
| <a id="Reliability">Reliability</a>                            | _The measure of a software system's ability to perform its intended functions consistently and accurately over time, under specified conditions. It involves aspects like fault tolerance, error handling, and system availability, ensuring that the system remains operational and dependable, even in the face of failures or unexpected conditions._                                                   |
| <a id="Single Server with Failover Mechanism">Single Server with Failover Mechanism</a>  | _A setup where a primary server handles all requests under normal conditions, and in case of its failure, a failover mechanism automatically redirects traffic to a backup server. This ensures continuous service availability, albeit with potential limitations in scalability and [performance](#Performance) compared to multi-server configurations._                                                                |
| <a id="Synchronous Image Loading">Synchronous Image Loading</a>               | _A process where images are loaded in a sequential manner, with each image request being processed and completed before the next one begins. This approach can cause delays in user interface responsiveness, as the system waits for each image to load completely before proceeding with other tasks._                                                                                                   |
| <a id="Usability">Usability</a>                              | _Refers to the ease with which users can effectively interact with a software system. In software architecture, usability encompasses designing interfaces and workflows that are intuitive, accessible, and provide a positive user experience._                                                                                                                                                         |
